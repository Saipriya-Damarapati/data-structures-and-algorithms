Bubble Sort
------------------
* Works based on partitions in the array, sorted and unsorted partition.
* Initially entire array is unsorted, after every iteration, sortedPartition grows and unsortedPartition reduces
* In place algorithm - Array is sorted with in itself, and no copy of array or another object is created
* O(n square) quadratic time complexity - performance degrades quickly with the increase in number of elements
* 100 steps to sort 10 items, 10000 steps to sort 100 items and so on

* Initially,
    unsortedPartitionIndex = 6 (which is the last index of unsorted partition)
    i = 0 (index used to traverse the array from left to right)

* Algorithm (default: right bubble sort)
    Step 1:     for every element, compare it with next element
    Step 2:     if value of next element is less than the value of current element, then swap the two elements
    Step 3:     repeat the process until all the elements are sorted,

    Notes:      after one iteration of step 1 & 2, last element is sorted
                so, last unsorted index will be decremented every iteration
                similarly, after k iterations, last k elements are sorted

                Step 1 & 2, time complexity is O(n) - to put the one highest element in its place
                this steps 1 & 2 is repeated for n times to sort all the elements resulting in O(n square) time complexity

    for(u = lastUnsortedIndex; u > 0; u--) {
        for (i = 0; i < u; i++) {
            if (a[i] > a[i + 1]) {
                swap (a[i], a[i+1])
            }
        }
        display(a);
        // decrement u in for loop; for one iteration, the elements at the position after u are sorted
    }