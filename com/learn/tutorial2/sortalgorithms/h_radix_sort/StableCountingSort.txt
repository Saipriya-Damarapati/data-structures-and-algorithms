Stable Counting Sort
-------------------------
* As discussed in Radix sort theory, we need a stable sort for it to work
* Counting sort is preferred to sort by radix because we know the
        radix of decimal integers is always 10
        radix of alphabet is always 26
        radix of binary numbers is always 2
    which means we know the range of values in every iteration
* Requires extra steps on counting sort
* Can calculate where values should be written back to the original array
* Writing the values into the array in backwards order ensures stability

* In counting sort, we will create a counting array of length 10,
    because radix is 10 for decimal numbers,
    and note the counts of each number

* For stable counting sort, we adjust the counts
    instead of storing number of values that have a specific 10's value,
    we want to store how many values have a specific 10's value or less

    for example, we want to store 3 at index 3, because 3 values have 10's value of 3 or less
    for example, we want to store 4 at index 8, because 4 values have 10's value of 8 or less

* Adjusted count can be calculated by adding up the counts up to and including the 10's value count.
* We can use these adjusted counts to write out the values in correct order and preserve the relative positioning of values

* For understanding, we are going to apply stable counting algorithm to achieve 10's position,
    to understand the behaviour on duplicate values
    input for this will be the array resulting from 1's position sorting

     Input Array:                4725    4586    1330    8792    1594    5729
    Based on 1's position :      1330    8792    1594    4725    4586    5729

                    Index :     0   1   2   3   4   5   6   7   8   9
     Apply Counting Array :     0   0   2   1   0   0   0   0   1   2
  Adjusted Counting array :     0   0   2   3   3   3   3   3   4   6

Algorithm after counting:
---------------------------
* Create a tmp array of the size input array
* Loop from left to right on the input array
    n = length of the input array
    k = 5 and goes to 0

    for(int k = n - 1; k >= 0; k--) {
        tmp[--adjustedCountArray[getDigit(position, input[k], radix)]]     =   input[k];
    }

              Input Array :      4725    4586    1330    8792    1594    5729
    Based on 1's position :      1330    8792    1594    4725    4586    5729
                    Index :     0   1   2   3   4   5   6   7   8   9
     Apply Counting Array :     0   0   2   1   0   0   0   0   1   2
  Adjusted Counting array :     0   0   2   3   3   3   3   3   4   6
                tmp Array :      4725    5729    1330    4586    8792    1594
                (derivation done below)
                (copy this to input array at the end of 10's position sorting)

    So, when k = 5,
    input[k] = 5729
    getDigit(5729) = 2
    adjustedCountArray[2] = 2
    --adjustedCountArray[2] = 1
    so, 5729 goes to tmp[1]

    |===================================================================================================|
    |   k                       |   5       |   4       |   3       |   2       |   1       |   0       |
    |===================================================================================================|
    |   input[k]                |   5729    |   4586    |   4725    |   1594    |   8792    |   1330    |
    |   getDigit                |   2       |   8       |   2       |   9       |   9       |   3       |
    |   adjustedCountArray      |   2       |   4       |   1*      |   6       |   5*      |   3       |
    |   --adjustedCountArray    |   1       |   3       |   0       |   5       |   4       |   2       |
    |   position in tmp array   |   1       |   3       |   0       |   5       |   4       |   2       |
    |===================================================================================================|

* This works because we traverse the input array from right to left, and we write duplicate values to tmp array from right to left
* If we know that duplicate values will go into positions 3 and 4,
    then we write the right most value in the input array to position 4
    and the left most value into position 3
* This preserves the relative positioning of duplicate elements
* By adjusting the counting array after initial pass, we can map values to indices in the tmp array


    * - decremented when k = 5 and when k = 2 respectively